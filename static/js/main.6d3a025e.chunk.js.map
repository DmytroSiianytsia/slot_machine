{"version":3,"sources":["components/card/Card.js","components/drum/Drum.js","App.js","serviceWorker.js","index.js"],"names":["Card","someCard","className","src","alt","Drum","props","numberOfCards","listCards","cards","i","push","length","splice","Math","floor","random","key","App","state","active","spin","setState","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAGO,SAASA,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SACrB,OACE,yBAAKC,UAAU,QACb,yBACEC,IAAG,gBAAWF,EAAX,QACHG,IAAKH,EACLC,UAAU,eCNX,SAASG,EAAKC,GACnB,IAIuBC,EAJjBC,EAAY,GACZC,EAAQ,CAAC,MAAO,OAAQ,WAAY,OAAQ,SAAU,OAC1D,OAAQ,QAAS,OAAQ,QAAS,QAAS,YAAa,OAM1D,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,EAAUG,KAAK,kBAACX,EAAD,CAAMC,UALAM,EAKwBE,EAAMG,OAJ5CH,EAAMI,OAAO,CAACC,KAAKC,MAAMD,KAAKE,SAAWT,IAAiB,IAILU,IAAKP,KAGnE,OACE,yBAAKR,UAAWI,EAAMJ,WACnBM,G,ICeQU,E,2MA5BbC,MAAQ,CACNC,OAAQ,M,EAGVC,KAAO,WACL,EAAKC,UAAS,SAAAH,GAAK,MAAK,CACtBC,OAA0B,OAAjBD,EAAMC,QAAoC,YAAjBD,EAAMC,OAAwB,SAAW,e,wEAK7E,OACE,yBAAKlB,UAAU,kBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OACb,kBAACG,EAAD,CAAMH,UAAS,gBAAWqB,KAAKJ,MAAMC,UACrC,kBAACf,EAAD,CAAMH,UAAS,gBAAWqB,KAAKJ,MAAMC,UACrC,kBAACf,EAAD,CAAMH,UAAS,gBAAWqB,KAAKJ,MAAMC,UACrC,kBAACf,EAAD,CAAMH,UAAS,gBAAWqB,KAAKJ,MAAMC,UACrC,kBAACf,EAAD,CAAMH,UAAS,gBAAWqB,KAAKJ,MAAMC,WAEvC,4BAAQlB,UAAU,MAAMsB,QAASD,KAAKF,MAAtC,c,GAtBQI,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d3a025e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nexport function Card({ someCard }) {\r\n  return (\r\n    <div className='card'>\r\n      <img\r\n        src={`./img/${someCard}.jpg`}\r\n        alt={someCard}\r\n        className='card__img'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Card } from '../card/Card';\r\n\r\nexport function Drum(props) {\r\n  const listCards = [];  \r\n  const cards = ['ace', 'crab', 'dolphine', 'fish', 'fishes', 'jack',\r\n    'king', 'manta', 'nine', 'pearl', 'queen', 'sea-horse', 'ten'];\r\n\r\n  function getRandomCard(numberOfCards) {    \r\n    return cards.splice([Math.floor(Math.random() * numberOfCards)], 1)    \r\n  }  \r\n\r\n  for (let i = 0; i < 13; i++) {\r\n    listCards.push(<Card someCard={getRandomCard(cards.length)} key={i} />)\r\n  }\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {listCards} \r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport './app.css';\r\nimport { Drum } from './components/drum/Drum';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    active: 'no',\r\n  }\r\n\r\n  spin = () => {\r\n    this.setState(state => ({\r\n      active: (state.active === 'no' || state.active === 'active1') ? 'active' : 'active1'\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='main-container'>\r\n        <div className='app-container'>\r\n          <div className='app'>\r\n            <Drum className={`drum0 ${this.state.active}`} />\r\n            <Drum className={`drum1 ${this.state.active}`} />\r\n            <Drum className={`drum2 ${this.state.active}`} />\r\n            <Drum className={`drum3 ${this.state.active}`} />\r\n            <Drum className={`drum4 ${this.state.active}`} />\r\n          </div>\r\n          <button className='btn' onClick={this.spin}>Spin</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}